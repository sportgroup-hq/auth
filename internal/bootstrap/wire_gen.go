// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"fmt"

	"github.com/sportgroup-hq/auth/internal/config"
	"github.com/sportgroup-hq/auth/internal/services/auth"
	"github.com/sportgroup-hq/auth/internal/services/user"
	"github.com/sportgroup-hq/common-lib/api"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// Injectors from wire.go:

func Up() (*Dependencies, error) {
	configConfig, err := config.New()
	if err != nil {
		return nil, err
	}
	apiClient, err := newGRPCService(configConfig)
	if err != nil {
		return nil, err
	}
	service := user.New(apiClient)
	authService := auth.NewService(service)
	dependencies := NewDependencies(configConfig, authService, service, apiClient)
	return dependencies, nil
}

// wire.go:

func newGRPCService(cfg config.Config) (api.ApiClient, error) {
	clientConn, err := grpc.NewClient(cfg.Services.API.Address, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		return nil, fmt.Errorf("failed creating new grpc client: %w", err)
	}

	return api.NewApiClient(clientConn), nil
}
